#include <boost/asio.hpp>
#include "../onnxruntime/include/onnxruntime/core/session/onnxruntime_cxx_api.h"
#include <thread>
#include <vector>
#include <iostream>
#include <ctime>

using boost::asio::ip::tcp;

const int maxs=10;

class Session {
public:
    Session(tcp::socket socket, Ort::Session& session) 
        : socket_(std::move(socket)), session_(session) {}

    void start() {
      // Use the ONNX Runtime session to run the model
      // ...

      // For simplicity, we just send a message back to the client
      // get request data from client
      std::vector<const char*> input_node_names = {"feat_ids", "feat_vals"};
      std::vector<const char*> output_node_names = {"prob"};
      std::vector<int64_t> input_node_dims = {35, 39};
      size_t input_tensor_size = 35 * 39;
      // Prepare input data
      // feat_ids node
      std::vector<int64_t> feat_ids_tensor_values{
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471,
        113995, 46083, 86323, 25806, 45678, 81769, 3948, 100714, 67679, 86021, 15761, 107961, 111813, 29150, 26991, 47468, 110431, 91142, 105117, 39091, 64180, 83621, 52327, 38212, 8810, 85661, 81799, 65109, 102601, 55306, 52315, 51648, 95763, 66291, 11107, 74377, 45597, 109698, 115471
      };
      // feat_vals node
      std::vector<float> feat_values_tensor_values{
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0
      };

      // create input tensor object from data values
      auto memory_info = Ort::MemoryInfo::CreateCpu(OrtArenaAllocator, OrtMemTypeDefault);
      Ort::Value feat_ids_input_tensor = Ort::Value::CreateTensor<int64_t>(memory_info, 
                                                                        feat_ids_tensor_values.data(), input_tensor_size,
                                                                        input_node_dims.data(), 2);
      Ort::Value feat_vals_input_tensor = Ort::Value::CreateTensor<float>(memory_info, 
                                                                        feat_values_tensor_values.data(), input_tensor_size, 
                                                                        input_node_dims.data(), 2);
      // set input
      std::vector<Ort::Value> ort_inputs;
      ort_inputs.push_back(std::move(feat_ids_input_tensor));
      ort_inputs.push_back(std::move(feat_vals_input_tensor));

      // Run the model
      auto output_tensors = session_.Run(Ort::RunOptions{nullptr}, input_node_names.data(), ort_inputs.data(), ort_inputs.size(), output_node_names.data(), 1);

      // Get the output results
      float* floatarr = output_tensors[0].GetTensorMutableData<float>();
      std::string message = "Output: " + std::to_string(floatarr[0]) + " " + std::to_string(rand() % maxs);

      boost::asio::write(socket_, boost::asio::buffer(message));
    }

private:
    tcp::socket socket_;
    Ort::Session& session_;
};

class Server {
public:
    Server(boost::asio::io_service& io_service, short port, Ort::Session& session)
        : acceptor_(io_service, tcp::endpoint(tcp::v4(), port)), session_(session) {
        do_accept();
    }

private:
    void do_accept() {
        acceptor_.async_accept([this](boost::system::error_code ec, tcp::socket socket) {
            if (!ec) {
                std::make_shared<Session>(std::move(socket), session_)->start();
            }
            do_accept();
        });
    }

    tcp::acceptor acceptor_;
    Ort::Session& session_;
};

int main() {
    // Initialize the environment
    Ort::Env env(ORT_LOGGING_LEVEL_WARNING, "ModelService");

    // Initialize the ONNX Runtime session with a model
    Ort::SessionOptions session_options;
    session_options.SetInterOpNumThreads(6);
    session_options.SetGraphOptimizationLevel(GraphOptimizationLevel::ORT_ENABLE_EXTENDED);
    Ort::Session session(env, "../../model/model.onnx", session_options);

    std::cout << "Model initialized" << std::endl;

    boost::asio::io_service io_service;
    Server server(io_service, 12345, session);

    // Create a pool of threads to run all of the io_services.
    std::vector<std::shared_ptr<std::thread>> threads;
    for (std::size_t i = 0; i < std::thread::hardware_concurrency(); ++i) {
        threads.emplace_back(std::make_shared<std::thread>([&io_service]() { io_service.run(); }));
    }

    // Wait for all threads in the pool to exit.
    for (auto& t : threads) {
        t->join();
    }

    return 0;
}